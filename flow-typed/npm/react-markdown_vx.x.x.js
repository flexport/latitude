// flow-typed signature: e0d13abf310cff0cb7ddd248d5787112
// flow-typed version: <<STUB>>/react-markdown_v4.1.0/flow_v0.104.0

/**
 * This is an autogenerated libdef stub for:
 *
 *   'react-markdown'
 *
 * Fill this stub out by replacing all the `any` types.
 *
 * Once filled out, we encourage you to share your work with the
 * community by sending a pull request to:
 * https://github.com/flowtype/flow-typed
 */

declare module 'react-markdown' {
  declare type BaseRendererProps = {|
    +children: React.Node,
  |};

  declare type RootRendererProps = {|
    ...BaseRendererProps,
    +className: ?string,
  |};

  declare type HeadingRendererProps = {|
    ...BaseRendererProps,
    +level: number,
  |};

  declare type ListRendererProps = {|
    ...BaseRendererProps,
    +start: ?number,
    +ordered: boolean,
    +tight: boolean,
    +depth: number,
  |};

  declare type ListItemRendererProps = {|
    ...BaseRendererProps,
    +checked: ?boolean,
    +tight: boolean,
    +ordered: boolean,
    +index: number,
  |};

  declare type CodeBlockRendererProps = {|
    +value: string,
    +language: ?string,
  |};

  declare type InlineCodeRendererProps = {|
    ...BaseRendererProps,
    inline: true,
  |};

  declare type LinkRendererProps = {|
    ...BaseRendererProps,
    title: ?string,
    target: ?string,
    href: string,
  |};

  declare type LinkReferenceRendererProps = {|
    ...BaseRendererProps,
    href: string,
  |};

  declare type ImageRendererProps = {|
    ...BaseRendererProps,
    title: ?string,
    alt: ?string,
    src: string,
  |};

  declare type ImageReferenceRendererProps = {|
    ...BaseRendererProps,
    title: ?string,
    alt: ?string,
    src: string,
  |};

  declare type TableRowRendererProps = {|
    ...BaseRendererProps,
    +isHeader: boolean,
  |};

  declare type TableCellRendererProps = {|
    ...BaseRendererProps,
    +align: string,
  |};

  declare type HtmlRendererProps = {|
    ...BaseRendererProps,
    +value: string,
    +isBlock: boolean,
    +skipHtml: boolean,
    +escapeHtml: boolean,
  |};

  declare type Renderers = {|
    +break?: BaseRendererProps => React.Node,
    +paragraph?: BaseRendererProps => React.Node,
    +emphasis?: BaseRendererProps => React.Node,
    +strong?: BaseRendererProps => React.Node,
    +thematicBreak?: BaseRendererProps => React.Node,
    +blockquote?: BaseRendererProps => React.Node,
    +delete?: BaseRendererProps => React.Node,
    +link?: LinkRendererProps => React.Node,
    +linkReference?: LinkReferenceRendererProps => React.Node,
    +image?: ImageRendererProps => React.Node,
    +imageReference?: ImageReferenceRendererProps => React.Node,
    +table?: BaseRendererProps => React.Node,
    +tableHead?: BaseRendererProps => React.Node,
    +tableBody?: BaseRendererProps => React.Node,
    +tableRow?: TableRowRendererProps => React.Node,
    +tableCell?: TableCellRendererProps => React.Node,
    +root?: RootRendererProps => React.Node,
    +text?: BaseRendererProps => React.Node,
    +list?: ListRendererProps => React.Node,
    +listItem?: ListItemRendererProps => React.Node,
    +heading?: HeadingRendererProps => React.Node,
    +inlineCode?: InlineCodeRendererProps => React.Node,
    +code?: CodeBlockRendererProps => React.Node,
    +html?: HtmlRendererProps => React.Node,
  |};

  declare type MarkdownProps = {|
    +source: string,
    +renderers: Renderers,
    +escapeHtml: boolean,
    +skipHtml: boolean,
  |}

  declare type MarkdownComponent = React$ComponentType<MarkdownProps>

  declare module.exports: MarkdownComponent;
}