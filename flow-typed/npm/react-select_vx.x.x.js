// flow-typed signature: 62773161d10d608afebf37589fdc862a
// flow-typed version: <<STUB>>/react-select_v1.x.x/flow_v0.56.0

/**
 * This is an autogenerated libdef stub for:
 *
 *   'react-select'
 *
 * Fill this stub out by replacing all the `any` types.
 *
 * Once filled out, we encourage you to share your work with the
 * community by sending a pull request to:
 * https://github.com/flowtype/flow-typed
 */
declare type TODO = any;

declare type StyleObject = {[styleKey: string]: string | number};

declare module "react-select" {
  declare export type SelectOption = {
    value: string | number,
    label: string,
    clearableValue?: boolean,
  };
  declare type Props = {
    "aria-describedby"?: string,
    "aria-label"?: string,
    "aria-labelledby"?: string,
    arrowRenderer?: ({
      onMouseDown: (event: *) => void,
      isOpen: boolean,
    }) => React.Node,
    autoBlur: boolean,
    autofocus?: boolean,
    autoFocus?: boolean,
    autoload: boolean,
    autosize: boolean,
    backspaceRemoves: boolean,
    backspaceToRemoveMessage: string,
    className?: string,
    clearable: boolean,
    clearAllText: string,
    clearRenderer?: () => React.Node,
    clearValueText: string,
    closeOnSelect: boolean,
    deleteRemoves: boolean,
    delimiter: string,
    disabled: boolean,
    escapeClearsValue: boolean,
    filterOption?: (SelectOption, string) => boolean,
    filterOptions?: (
      $ReadOnlyArray<SelectOption>,
      string,
      $ReadOnlyArray<TODO>
    ) => boolean,
    id?: string,
    ignoreAccents: boolean,
    ignoreCase: boolean,
    inputProps?: {[attributeKey: string]: string},
    inputRenderer?: TODO => React.Node,
    instanceId?: string,
    isLoading: boolean,
    joinValue: boolean,
    labelKey: string,
    matchPos: "any" | "start",
    matchProp: "any" | "label" | "value",
    menuBuffer: number,
    menuRenderer?: ({
      focusedOption: SelectOption,
      focusOption: SelectOption => void,
      labelKey: string,
      optionClassName: string,
      optionComponent: React.Component<*>,
      optionRenderer: SelectOption => React.Node,
      options: $ReadOnlyArray<SelectOption>,
      selectValue: SelectOption => void,
      valueArray: $ReadOnlyArray<SelectOption>,
    }) => React.Node,
    menuStyle?: StyleObject,
    multi?: boolean,
    name?: string,
    noResultsText: string,
    onBlur?: (event: *) => void,
    onBlurResetsInput: boolean,
    onChange?:
      | (SelectOption => void)
      | (($ReadOnlyArray<SelectOption>) => void)
      | (string => void),
    onClose?: () => void,
    onCloseResetsInput: boolean,
    onFocus?: (event: *) => void,
    onInputChange?: string => string,
    onInputKeyDown?: (event: *) => void,
    onMenuScrollToBottom?: () => void,
    onOpen?: () => void,
    onSelectResetsInput: boolean,
    onValueClick?: (TODO, event: *) => void,
    openOnClick: boolean,
    openOnFocus: boolean,
    optionClassName?: string,
    optionComponent?: () => React.Component<*>,
    optionRenderer?: () => React.Node,
    options?: $ReadOnlyArray<SelectOption>,
    removeSelected: boolean,
    pageSize: number,
    placeholder: string,
    required: boolean,
    resetValue: null | SelectOption,
    rtl: boolean,
    scrollMenuIntoView: boolean,
    searchable: boolean,
    searchPromptText: string,
    simpleValue: boolean,
    style?: StyleObject,
    tabIndex?: string | number,
    tabSelectsValue: boolean,
    trimFilter: boolean,
    value?: TODO,
    valueComponent?: () => React.Component<*>,
    valueKey: string,
    valueRenderer?: TODO => React.Node,
    wrapperStyle?: StyleObject,
  };

  declare type DefaultProps = {
    autoBlur: boolean,
    autoload: boolean,
    autosize: boolean,
    backspaceRemoves: boolean,
    backspaceToRemoveMessage: string,
    clearable: boolean,
    clearAllText: string,
    clearValueText: string,
    closeOnSelect: boolean,
    deleteRemoves: boolean,
    delimiter: string,
    disabled: boolean,
    escapeClearsValue: boolean,
    ignoreAccents: boolean,
    ignoreCase: boolean,
    isLoading: boolean,
    joinValue: boolean,
    labelKey: boolean,
    matchPos: "any" | "start",
    matchProp: "any" | "label" | "value",
    menuBuffer: number,
    noResultsText: string,
    onBlurResetsInput: boolean,
    onCloseResetsInput: boolean,
    onSelectResetsInput: boolean,
    openOnClick: boolean,
    openOnFocus: boolean,
    removeSelected: boolean,
    pageSize: number,
    placeholder: string,
    required: boolean,
    resetValue: null | SelectOption,
    rtl: boolean,
    scrollMenuIntoView: boolean,
    searchable: boolean,
    searchPromptText: string,
    simpleValue: boolean,
    tabSelectsValue: boolean,
    trimValue: boolean,
    valueKey: string,
  };

  declare export type ExternalProps = {
    "aria-describedby"?: string,
    "aria-label"?: string,
    "aria-labelledby"?: string,
    arrowRenderer?: ({
      onMouseDown: (event: *) => void,
      isOpen: boolean,
    }) => React.Node,
    autoBlur?: boolean,
    autofocus?: boolean,
    autoFocus?: boolean,
    autoload?: boolean,
    autosize?: boolean,
    backspaceRemoves?: boolean,
    backspaceToRemoveMessage?: string,
    className?: string,
    clearable?: boolean,
    clearAllText?: string,
    clearRenderer?: () => React.Node,
    clearValueText?: string,
    closeOnSelect?: boolean,
    deleteRemoves?: boolean,
    delimiter?: string,
    disabled?: boolean,
    escapeClearsValue?: boolean,
    filterOption?: (SelectOption, string) => boolean,
    filterOptions?: (
      $ReadOnlyArray<SelectOption>,
      string,
      $ReadOnlyArray<TODO>
    ) => boolean,
    id?: string,
    ignoreAccents?: boolean,
    ignoreCase?: boolean,
    inputProps?: {[attributeKey: string]: string},
    inputRenderer?: TODO => React.Node,
    instanceId?: string,
    isLoading?: boolean,
    joinValue?: boolean,
    labelKey?: string,
    matchPos?: "any" | "start",
    matchProp?: "any" | "label" | "value",
    menuBuffer?: number,
    menuRenderer?: ({
      focusedOption: SelectOption,
      focusOption: SelectOption => void,
      labelKey: string,
      optionClassName: string,
      optionComponent: React.Component<*>,
      optionRenderer: SelectOption => React.Node,
      options: $ReadOnlyArray<SelectOption>,
      selectValue: SelectOption => void,
      valueArray: $ReadOnlyArray<SelectOption>,
    }) => React.Node,
    menuStyle?: StyleObject,
    multi?: boolean,
    name?: string,
    noResultsText?: string,
    onBlur?: (event: *) => void,
    onBlurResetsInput?: boolean,
    onChange?: (SelectOption | $ReadOnlyArray<SelectOption> | string) => void,
    onClose?: () => void,
    onCloseResetsInput?: boolean,
    onFocus?: (event: *) => void,
    onInputChange?: string => string,
    onInputKeyDown?: (event: *) => void,
    onMenuScrollToBottom?: () => void,
    onOpen?: () => void,
    onSelectResetsInput?: boolean,
    onValueClick?: (TODO, event: *) => void,
    openOnClick?: boolean,
    openOnFocus?: boolean,
    optionClassName?: string,
    optionComponent?: () => React.Component<*>,
    optionRenderer?: () => React.Node,
    options?: $ReadOnlyArray<SelectOption>,
    removeSelected?: boolean,
    pageSize?: number,
    placeholder?: string,
    required?: boolean,
    resetValue?: null | SelectOption,
    rtl?: boolean,
    scrollMenuIntoView?: boolean,
    searchable?: boolean,
    searchPromptText?: string,
    simpleValue?: boolean,
    style?: StyleObject,
    tabIndex?: string | number,
    tabSelectsValue?: boolean,
    trimFilter?: boolean,
    value?: TODO,
    valueComponent?: () => React.Component<*>,
    valueKey?: string,
    valueRenderer?: TODO => React.Node,
    wrapperStyle?: StyleObject,
  };

  declare export default class Select extends React.Component<Props> {
    static defaultProps: DefaultProps,

    focus(): void,
  }

  declare type OptionProps = {
    option: SelectOption,
    instancePrefix: string,
    className?: string,
    isDisabled?: boolean,
    isFocused?: boolean,
    isSelected?: boolean,
    focusOption: (SelectOption) => void,
    selectValue: (SelectOption) => void,
  };
  declare export class Option extends React.Component<OptionProps> {
  }
}
