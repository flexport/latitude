// flow-typed signature: 187b95b3ace7477ac5397f8c1104b1be
// flow-typed version: <<STUB>>/react-popper_v1.3.4/flow_v0.107.0

/**
 * This is an autogenerated libdef stub for:
 *
 *   'react-popper'
 *
 * Fill this stub out by replacing all the `any` types.
 *
 * Once filled out, we encourage you to share your work with the
 * community by sending a pull request to:
 * https://github.com/flowtype/flow-typed
 */

declare module 'react-popper' {
  declare type ManagerProps = {|
    +children: React.Node
  |};
  declare export var Manager: React$ComponentType<ManagerProps>;

  declare type ReferenceObject = {
    +getBoundingClientRect: () => DOMRect,
    +clientWidth: number,
    +clientHeight: number,
  };
  declare type Modifiers = {+[string]: mixed};
  declare type Style = {[string]: string | number};
  declare type getRefFn = (?HTMLElement) => void;
  declare type ReferenceElement = ReferenceObject | HTMLElement | null;
  declare type StyleOffsets = {| top: number, left: number |};
  declare type StylePosition = {| position: 'absolute' | 'fixed' |};
  declare type PopperArrowProps = {
    +ref: getRefFn,
    +style: StyleOffsets & Style,
  };
  declare type PopperChildrenProps = {|
    +ref: getRefFn,
    +style: StyleOffsets & StylePosition & Style,
    +placement: Placement,
    +outOfBoundaries: ?boolean,
    +scheduleUpdate: () => void,
    +arrowProps: PopperArrowProps,
  |};
  declare type PopperProps = {|
    +children: PopperChildrenProps => React.Node,
    +eventsEnabled?: boolean,
    +innerRef?: getRefFn,
    +modifiers?: Modifiers,
    +placement?: Placement,
    +positionFixed?: boolean,
    +referenceElement?: ReferenceElement,
  |};
  declare export var Popper: React$ComponentType<PopperProps>;

  declare export type Placement =
    | 'auto-start'
    | 'auto'
    | 'auto-end'
    | 'top-start'
    | 'top'
    | 'top-end'
    | 'right-start'
    | 'right'
    | 'right-end'
    | 'bottom-end'
    | 'bottom'
    | 'bottom-start'
    | 'left-end'
    | 'left'
    | 'left-start';
  declare export var placements: $ReadOnlyArray<Placement>;

  declare type ReferenceChildrenProps = { +ref: (?HTMLElement) => void };
  declare type ReferenceProps = {|
    +children: ReferenceChildrenProps => React.Node,
    +innerRef?: (?HTMLElement) => void,
  |};
  declare export var Reference: React$ComponentType<ReferenceProps>;
}
